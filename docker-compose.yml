version: '3.8'
# docker ps
# docker logs spring-boot-app 
# docker build -t kedawr/module1 -f . пересобрать rvx
#  docker build -t kidawr/module1  .  && docker compose down && docker compose up -d && docker exec -it spring-boot-app /bin/bash
services:

  #init-db:
  #  image: python:3.11-alpine
  #  container_name: db-init
  #  volumes:
  #    - ./initdb:/initdb
  #  working_dir: /initdb
  #  entrypoint: ["python", "generate_sql.py"]
  #  networks:
  #    - app-network

  database:
    image: postgres:13
    container_name: pg-docker
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    #volumes:
    #  - ./initdb/scripts_python:/docker-entrypoint-initdb.d
    networks:
      - app-network
    #depends_on:
    #  init-db:
    #    condition: service_completed_successfully

  app:
    image: kidawr/module1
    #build:
    #  context: .
    #  dockerfile: Dockerfile
    container_name: spring-boot-app
    restart: always
    #depends_on:
    #  - database
    env_file:
      - .env
    environment:
      SPRING_JPA_HIBERNATE_DDL_AUTO: update  # Автоматическое обновление схемы базы данных
      SPRING_JPA_SHOW_SQL: 'false'  # отключаем логи Hibernate
      SERVER_TOMCAT_MAX_THREADS: '200'
    ports:
      - "8080:8080"
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'  # лимиты для CPU
          memory: 512M  # лимиты для памяти
        reservations:
          cpus: '0.5'  # Резервирование CPU
          memory: 256M  # Резервирование памяти


          
networks:
  app-network:
    driver: bridge
